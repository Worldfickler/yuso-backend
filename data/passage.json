{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1725425242228256769",
        "title": "几个测试接口的好工具，效率加倍~",
        "description": null,
        "content": "作为一名后端程序员，一定要对自己写的接口负责，保证接口的正确和稳定性。因此，接口测试也是后端开发中的关键环节。\n\n但我相信，很多朋友是懒得测试接口的，觉得这很麻烦。一般自己写的接口自己都不调用，而是直接甩给前端或者其他调用方去验证，出了问题再改。虽然自己爽了，但在别人眼里，可能已经对你 “怀恨在心”，不是不报，时候未到而已。\n\n其实测试接口并不难，这篇文章就给大家分享一些常用的接口测试工具，其中有些工具不仅能帮助你高效测试接口，甚至还能自动生成接口代码和接口文档！\n\n\n\n## 常用接口测试工具\n\n这里给大家推荐 4 种常用的接口测试工具，至于到底用哪个，全凭大家的喜好，自己用着舒服就好。\n\n\n\n### 1、cURL\n\ncURL 是一个功能强大的命令行工具，它可以用命令的形式来发送各种类型的 HTTP 请求。虽然它没有图形界面，但是却非常灵活，深受开发者们的喜爱。\n\n> 指路：https://curl.se/\n\n\n\ncURL 的用法也很简单，比如测试 GET 请求类型的接口，只需输入下列命令：\n\n```bash\ncurl <要测试的接口地址>\n```\n\n\n\n测试 POST 类型的接口，命令如下：\n\n```bash\ncurl -d '{\"name\":\"yupi\"}'\n  -H \"Content-Type: application/json\"\n  <要测试的接口地址>\n```\n\n\n\n其中使用 `-d` 选项表示要发送的数据，`-H` 选项设置请求头，指定发送 JSON 数据。\n\n以上只是 cURL 的基础用法，它还支持很多高级的参数，不过没必要去记忆。一般我们在调用别人接口时，可以先在 F12 开发者工具中找到某个请求，然后点击 `以 cURL 格式复制` 就能得到可直接使用的 curl 命令了。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697727100098-011d8a12-2fe5-4421-8f8d-825c21d63f56.png)\n\n\n\n强烈建议大家学会使用 cURL，尤其是 Linux 开发者们，在没有图形界面的场景下这个工具可太实用了。\n\n\n\n### 2、Apifox\n\n要是几年前，我可能还会建议大家去用 Postman 这种图形界面测试软件，但现在时代变了，越来越多国产的接口测试工具能力已经远超了 Postman。\n\n比如我在用的 Apifox，它是一个非常强大的 `API 设计 + 开发 + 测试一体` 的协作工具。\n\n> 指路：http://apifox.com/b2liyupi\n\n\n\n首先是支持 20 多种格式的接口数据导入，快速可视化接口信息：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697727719582-3b58a60f-70a8-42b1-ba48-14adbeedd4c9.png)\n\n\n\n然后可以一键调试接口，哪怕你本地的后端服务器没有启动，也可以通过 Mock 功能快速生成模拟数据！\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697727817429-5ebc1665-2179-45f3-aa55-bd863d78d01a.png)\n\n\n\nApifox 还有个很强大的能力，支持基于接口信息去生成 130 多种语言及框架的代码！也就是说，你可以先和前端约定并编写好接口文档，然后直接生成代码就能给前端调试了。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697727951940-af4b1020-2acb-4730-b714-12cb863c3254.png)\n\n\n\n更多的功能就先不介绍了，感兴趣的同学自己探索。\n\n\n\n### 3、IDEA 的 HTTP Client\n\nIntelliJ IDEA 开发工具内置了一个 HTTP Client 工具，它允许开发者在 IDE 中直接创建、管理和发送 HTTP 请求，并查看响应结果。\n\n用法很简单，首先进入 IDE 的 Tools => HTTP Client，点击创建一个请求：\n\n支持将 cURL 转换为 HTTP 请求，可见 cURL 的地位\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697728344182-79ba6724-5b50-4978-b037-b35f2fac0c75.png)\n\n然后进入请求编辑界面，刚开始不熟悉请求编写语法的话，可以点击右上角导入示例的请求信息：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697728547281-1407dd65-67d8-4a57-a4ac-3c5979338560.png)\n\n比如导入一个 GET 请求示例：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697728604443-a711636d-553c-4c68-9e1c-1f7992e73e3a.png)\n\n\n\n然后点击绿色的箭头就能发送接口测试请求了，能够看到详细的响应信息：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697728679041-2f5203ea-da78-4088-96d7-5ee408e79877.png)\n\n\n\n不过我个人不喜欢这种方式来测试接口，写代码已经很累了，结果测试接口还让我写代码？？？\n\n\n\n### 4、Swagger 和 Knife4j\n\n#### Swagger\n\nSwagger 是一个知名的 API 开源项目。此前，很多同学对 Swagger 的认识可能仅停留在生成接口文档，即下图的 `Swagger UI`，可以在线查看和调试接口信息。\n\n> 指路：https://swagger.io/tools/swagger-ui/\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697728940485-0597573e-97c2-4867-a79e-9cdb0aab2f04.png)\n\n\n\n但实际上，Swagger UI 只是 Swagger 的其中一个功能，Swagger 还包含了 Swagger Editor 接口编辑器、Swagger Codegen 代码生成器等强大工具。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697729062255-9dbd38c5-dfc1-4de8-a42d-8b824c59f9da.png)\n\n\n\n严格来说，Swagger 是 **一套** 完整的 API 开发工具，让我们在统一的界面中完成 API 设计、接口开发、接口测试、文档生成等功能，极大地提高了开发效率。\n\n一般来说，只需要在项目中引入 Swagger 依赖，并且通过注解的方式来描述 API 的信息，就可以使用它进行接口测试和文档生成了。\n\n但其实，我个人已经很久没有直接使用 Swagger 了，而是会选用它的增强版 `Knife4j` 来生成接口文档。要说原因的话，就是 Swagger 的默认界面有点小丑，API 多了管理起来就会很麻烦。\n\n感受一下：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697729785541-29de1f7b-e428-4ba8-8104-8fe75af138d3.png)\n\n\n\n#### Knife4j\n\nKnife4j 是一个基于 Swagger 的增强工具，它提供了更美观的界面和更多功能，让接口测试和文档生成更加高效。\n\n> 指路：https://doc.xiaominfo.com/\n\n\n\nKnife4j 的用法很简单，按照官方文档的指引，首先根据自己项目的 Spring Boot 版本引入对应的依赖，比如 Spring Boot 2.x 推荐使用以下 Maven 配置：\n\n```xml\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>\n    <version>4.3.0</version>\n</dependency>\n```\n\n\n\n然后在 Spring Boot 的配置文件 `application.yml` 中添加 Knife4j 相关配置，比如：\n\n```yaml\nknife4j:\n  enable: true\n  openapi:\n    title: Knife4j 文档\n```\n\n\n\n最后，访问 Knife4j 的文档地址（一般是项目地址 + `/doc.html`），即可查看自动根据 Controller 接口代码而生成的接口文档。\n\n示例文档如下：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697730186817-40f8d1db-ea19-45f9-ae0e-b7f032c0189e.png)\n\n选中某个接口，就可以在线调试了：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697730368657-397cec17-d11a-4d40-a620-ab6d4b9b3918.png)\n\n\n\n当然，因为 Knife4j 的底层也是依赖 Swagger 的，所以你还可以使用 Swagger 注解来自定义接口的信息。\n\n比如下列代码，就使用了 Swagger 的 @Api 和 @ApiOperation 注解给接口添加名称和描述信息：\n\n```java\n@RestController\n@RequestMapping(\"/api/posts\")\n@Api(tags = \"帖子管理\")\npublic class PostController {\n\n    @PostMapping\n    @ApiOperation(value = \"创建帖子\", notes = \"用于创建新的帖子\")\n    public ResponseEntity<String> createPost(@RequestBody PostRequest postRequest) {\n        // 在这里实现创建帖子的逻辑\n        return ResponseEntity.ok(\"帖子创建成功\");\n    }\n}\n```\n\n\n\n这样能让生成的接口文档更通俗易懂，而不是大把的英文。\n\n\n\n------\n\n\n\n总结一下，我个人最推荐的接口调试方式是 cURL、Apifox 和 Knife4j 的组合：\n\n- 无界面（Linux）环境用 cURL\n- 桌面端管理接口、Mock 数据用 Apifox\n- 项目中引入 Knife4j，实现快速的接口文档生成和 web 共享\n\n\n\n## 实践\n\n编程导航星球的所有后端项目都使用了 Swagger + Knife4j 实现接口调试和接口文档生成。\n\n\uD83D\uDC49\uD83C\uDFFB 编程导航原创项目教程系列：https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/KHnHTIXi-SCR-20231116-kecm.jpeg",
        "language": null,
        "viewNum": 1,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-17T08:06:49.000+00:00",
        "updateTime": "2023-11-17T08:11:49.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 2945,
          "coin": 170,
          "followeeNum": 1240,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-11-16T12:41:29.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1725422769975455746",
        "title": "语雀 P0 事故复盘，这 9 个字亮了！",
        "description": null,
        "content": "大家好，我是鱼皮。\n\n最近语雀不是出了个号称 “载入史册” 的 P0 级事故嘛 —— 连续宕机 7 个多小时无法使用，作为一个大厂知名产品，这个修复速度属实让人无法理解。要命的是我们公司的知识库也是放在语雀上的，导致那天下午大家摸鱼很愉快。\n\n很快，官方就发布了《故障公告》。有一说一，这个公告写得还是挺不错的，时间线梳理的很清楚。而且起码没有把责任归咎于 “网络原因”，还以为又是某个地区的网线被挖断了呢。\n\n>  故障公告原文：https://mp.weixin.qq.com/s/WFLLU8R4bmiqv6OGa-QMcw\n\n也有同学看了的语雀故障公告文章，发现改进措施这一段中提到了 “可监控，可灰度，可回滚” 这 9 个字，我觉得这确实是全文的核心亮点了，把事故复盘总结地很精辟。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20231026144117655.png)\n\n但是这 9 个字到底是什么意思呢？鱼皮给大家解读一下。\n\n\n\n## 如何保证系统发布的稳定性？\n\n首先，这几点都是企业正式线上项目需要重点关注的能力，所以大家在校自学时一般是很少能接触到的。\n\n>  但如果你知道并实践过这些，前途不可限量啊！\n\n\n\n### 可监控\n\n可监控是指能够实时地收集和展示系统运行时的数据和指标，以便开发和运维同学可以及时发现系统问题、更快进行故障排查和性能调优。需要监控的信息可以包括系统性能指标（内存、CPU、带宽等）、业务日志、错误信息等。\n\n还有一个与之相关的术语 “可观测性”，就是指一个系统状态对开发维护者的透明程度。举个例子，我不需要每次打开服务器看日志或者用什么 jmap 命令分析 gc，而是直接通过一个面板整体查看系统的状态，甚至是自动提示问题和解决方案。\n\nAIOps 智能运维也是现在很流行的一种技术，用 AI 帮忙运维诊断系统，大大提高开发运维效率。\n\n \n\n### 可灰度\n\n指灰度发布能力（又叫金丝雀发布）。将系统的新版本全量部署给所有用户之前，先仅对一小部分用户进行试用。这样可以通过收集这部分用户的反馈和监控数据就能评估新版本的稳定性，并及时进行调整和修复，从而减少对全体用户的潜在风险。\n\n灰度发布又有很多策略。比如经典的按流量阶段性发布，先随机给 5% 的用户使用新版本，验证没问题后，再给 20%、50%、75% 的用户使用新版本逐渐放量，直到覆盖 100% 的用户。\n\n还有很多策略，列举几个常见的：\n\n1）按照用户的业务属性灰度，比如 VIP 用户先用、老用户先用。\n\n2）按人群灰度，比如特定地域、特定年龄、特定偏好、特定客户端的用户。\n\n3）按渠道灰度，比如通过某平台注册的用户先体验等等。\n\n灰度做的好，可以避免很多线上问题，及时控制影响。因此很多知名产品发布时都会采用灰度或者内测的策略，这也就是为什么有些同学能第一时间体验到微信新功能，有些同学却没有。\n\n\n\n### 可回滚\n\n就像 Git 版本控制系统回滚写错的代码一样，系统的版本也是可以回滚的。\n\n线上系统出现问题时，可以将已经部署的新版本回退到之前的稳定版本。这样做可以快速恢复系统，减少对用户的影响，并给开发同学足够的时间来排查和修复问题。而不是线上一直故障，每分钟都是损失。\n\n\n\n## 最后\n\n咱也不是阿里内部的同学，说实话我不相信阿里内部没有统一的监控平台、灰度发布和部署管理平台。估计是部门自治或者人员不规范的操作导致的吧。（毕竟一个实习生说不定就能干崩一家公司）\n\n总之，上面讲的这些特性都是为了在软件开发和发布过程中提高系统的稳定性、可靠性和可维护性。\n\n想要实践上面这几点其实也很简单，直接用微信云托管平台就好了。我之前直播时录制过一套微信云托管的实践教程，大家如果需要的话，可以评论 “需要教程” 让我看看大家对这方面的需求，有必要的话回头给大家发出来~",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/3Cy8KShU-SCR-20231117-nyqp.png",
        "language": null,
        "viewNum": 1,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-17T07:56:59.000+00:00",
        "updateTime": "2023-11-17T08:03:59.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 2945,
          "coin": 170,
          "followeeNum": 1240,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-11-16T12:41:29.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1725415310590341121",
        "title": "研究生-Java-实习",
        "description": "https://laoyujianli.com/i_share/8D7yr6",
        "content": "<p>鱼皮哥，本人无实习经历，这几天才开始投递实习，已经过了一周了，目前没有多少回复，希望鱼总可以指点一下不足，顺便问一下：现在投递（日常）实习是不是有点晚了，还是明年开春投递呢，谢谢鱼总~</p>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 1,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1625356139321454593",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-17T07:27:21.000+00:00",
        "updateTime": "2023-11-17T07:27:42.000+00:00",
        "user": {
          "id": "1625356139321454593",
          "planetCode": "13699",
          "userName": "Cyan Chau",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1625356139321454593/tpQJeQ2T-QQ图片20231007162144.jpg",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-02-28T13:16:08.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-14T04:47:55.000+00:00",
          "updateTime": "2023-11-17T07:16:05.000+00:00"
        },
        "tags": [
          "简历"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1725404750847012865",
        "title": "【Redis应用】UV统计",
        "description": "Redis实现UV统计",
        "content": "# 一.引入\n\n首先我们要搞懂两个概念：\n\n* `UV`：全称`Unique Visitor`，也叫**独立访客量**，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。\n* `PV`：全称`Page View`，也叫**页面访问量或点击量**，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。\n\n通常来说PV会比UV大很多，所以当我们要去衡量一个网站的情况，我们需要结合多个值一起来分析，通过UV我们可以得知网站的访客量，通过PV我们可以得知页面的访问量，而通过pv与uv的比值我们可以得知网站的用户粘度。\n\nUV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖，那怎么处理呢？\n\n# 二.HyperLogLog使用\n\n`Hyperloglog(HLL)`是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理可以参考：[点击跳转](https://juejin.cn/post/6844903785744056333#heading-0)。\nRedis中的HLL是基于string结构实现的，单个HLL的内存**永远小于16kb**，**内存占用低**的令人发指！作为代价，其测量结果是概率性的，**有小于0.81％的误差**。不过对于UV统计来说，这完全可以忽略。\n\n**它对应的命令有三个：**\n![image.png](https://pic.code-nav.cn/post_picture/1619305100524748802/hnK0NYCF-image.png)\n当我们使用`PFADD`命令添加元素时他会自动帮助我们去除重复元素，只统计不同的元素个数。\n\n# 三.模拟实现UV统计\n\n由于我们没有那么多的测试用户，所以我们选择利用单元测试模拟100万次用户访问量。\n\n测试思路：我们直接利用单元测试，向HyperLogLog中添加100万条数据，看看内存占用和统计效果如何\n\n```java\n   // 准备数组，装填用户数据\n        String[] users = new String[1000];\n        // 数组角标\n        int index = 0;\n        for (int i = 0; i < 1000000; i++) {\n            // 赋值\n            users[index++] = \"user_\" + i;\n            // 每1000条发送以此\n            if (i % 1000 == 0) {\n                index = 0;\n                redisTemplate.opsForHyperLogLog().add(\"test\", users);\n            }\n        }\n        // 统计数量\n        Long size = redisTemplate.opsForHyperLogLog().size(\"test\");\n        System.out.println(\"size=\" + size);\n```\n\n经过测试：我们可以发现它确实可以帮助我们统计UV并且内存占用极小，但确实存在一定的误差，但是误差是在允许范围内的。\n\n![image.png](https://pic.code-nav.cn/post_picture/1619305100524748802/H2JWZFXc-image.png)\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 1,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1619305100524748802",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-17T06:45:23.000+00:00",
        "updateTime": "2023-11-17T06:45:37.000+00:00",
        "user": {
          "id": "1619305100524748802",
          "planetCode": "6872",
          "userName": "观止.",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/OYu6LaaicHd8CDShMPqharTUTck82BzOggVOzdsF3AqPyVMRjAjEicQpvpQTQAeUFOvnsPuHLBTYNDWMgsg0r5LQ/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": -4,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 10,
          "coin": 100,
          "followeeNum": 2,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-01-28T13:18:24.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-28T12:03:15.000+00:00",
          "updateTime": "2023-11-17T06:41:43.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1725379904230518786",
        "title": "Springboot整合Minio全流程（从安装minio到应用）",
        "description": "详细介绍了如何在centos7系统安装docker，然后在docker上安装minio，最后在spring boot集成minio并应用的全过程",
        "content": "# 一、centos7安装docker\n参考博客：centos7安装Docker详细步骤（无坑版教程）-腾讯云开发者社区-腾讯云\nhttps://cloud.tencent.com/developer/article/1701451\n以下是我个人操作的过程截图。\n\n```bash\nLinux 内核：官方建议 3.10 以上，3.8以上貌似也可。\n注意：本文的命令使用的是 root 用户登录执行，不是 root 的话所有命令前面要加 sudo\n[root@zzx ~]# uname -r\n3.10.0-957.21.3.el7.x86_64\n安装需要的软件包， yum-util 提供yum-config-manager功能，另两个是devicemapper驱动依赖\n[root@zzx ~]# yum install -y yum-utils device-mapper-persistent-data lvm2\nLoaded plugins: fastestmirror\nDetermining fastest mirrors\n * centos-sclo-rh: ftp.sjtu.edu.cn\nbase                                                                                                                                                      | 3.6 kB  00:00:00     \ncentos-sclo-rh                                                                                                                                            | 3.0 kB  00:00:00     \nepel                                                                                                                                                      | 4.7 kB  00:00:00     \nextras                                                                                                                                                    | 2.9 kB  00:00:00     \nupdates                                                                                                                                                   | 2.9 kB  00:00:00     \nzerotier                                                                                                                                                  | 3.0 kB  00:00:00     \n(1/3): epel/x86_64/updateinfo                                                                                                                             | 1.0 MB  00:00:00     \n(2/3): epel/x86_64/primary_db                                                                                                                             | 7.0 MB  00:00:00     \n(3/3): updates/7/x86_64/primary_db                                                                                                                        |  24 MB  00:00:00     \nResolving Dependencies\n--> Running transaction check\n---> Package device-mapper-persistent-data.x86_64 0:0.8.5-3.el7_9.2 will be installed\n---> Package lvm2.x86_64 7:2.02.187-6.el7_9.5 will be installed\n--> Processing Dependency: lvm2-libs = 7:2.02.187-6.el7_9.5 for package: 7:lvm2-2.02.187-6.el7_9.5.x86_64\n--> Processing Dependency: liblvm2app.so.2.2(Base)(64bit) for package: 7:lvm2-2.02.187-6.el7_9.5.x86_64\n--> Processing Dependency: libdevmapper-event.so.1.02(Base)(64bit) for package: 7:lvm2-2.02.187-6.el7_9.5.x86_64\n--> Processing Dependency: liblvm2app.so.2.2()(64bit) for package: 7:lvm2-2.02.187-6.el7_9.5.x86_64\n--> Processing Dependency: libdevmapper-event.so.1.02()(64bit) for package: 7:lvm2-2.02.187-6.el7_9.5.x86_64\n---> Package yum-utils.noarch 0:1.1.31-54.el7_8 will be installed\n--> Processing Dependency: python-kitchen for package: yum-utils-1.1.31-54.el7_8.noarch\n--> Running transaction check\n---> Package device-mapper-event-libs.x86_64 7:1.02.170-6.el7_9.5 will be installed\n---> Package lvm2-libs.x86_64 7:2.02.187-6.el7_9.5 will be installed\n--> Processing Dependency: device-mapper-event = 7:1.02.170-6.el7_9.5 for package: 7:lvm2-libs-2.02.187-6.el7_9.5.x86_64\n---> Package python-kitchen.noarch 0:1.1.1-5.el7 will be installed\n--> Processing Dependency: python-chardet for package: python-kitchen-1.1.1-5.el7.noarch\n--> Running transaction check\n---> Package device-mapper-event.x86_64 7:1.02.170-6.el7_9.5 will be installed\n--> Processing Dependency: device-mapper = 7:1.02.170-6.el7_9.5 for package: 7:device-mapper-event-1.02.170-6.el7_9.5.x86_64\n---> Package python-chardet.noarch 0:2.2.1-3.el7 will be installed\n--> Running transaction check\n---> Package device-mapper.x86_64 7:1.02.149-10.el7_6.8 will be updated\n--> Processing Dependency: device-mapper = 7:1.02.149-10.el7_6.8 for package: 7:device-mapper-libs-1.02.149-10.el7_6.8.x86_64\n---> Package device-mapper.x86_64 7:1.02.170-6.el7_9.5 will be an update\n--> Running transaction check\n---> Package device-mapper-libs.x86_64 7:1.02.149-10.el7_6.8 will be updated\n---> Package device-mapper-libs.x86_64 7:1.02.170-6.el7_9.5 will be an update\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n=================================================================================================================================================================================\n Package                                                 Arch                             Version                                        Repository                         Size\n=================================================================================================================================================================================\nInstalling:\n device-mapper-persistent-data                           x86_64                           0.8.5-3.el7_9.2                                updates                           423 k\n lvm2                                                    x86_64                           7:2.02.187-6.el7_9.5                           updates                           1.3 M\n yum-utils                                               noarch                           1.1.31-54.el7_8                                base                              122 k\nInstalling for dependencies:\n device-mapper-event                                     x86_64                           7:1.02.170-6.el7_9.5                           updates                           192 k\n device-mapper-event-libs                                x86_64                           7:1.02.170-6.el7_9.5                           updates                           192 k\n lvm2-libs                                               x86_64                           7:2.02.187-6.el7_9.5                           updates                           1.1 M\n python-chardet                                          noarch                           2.2.1-3.el7                                    base                              227 k\n python-kitchen                                          noarch                           1.1.1-5.el7                                    base                              267 k\nUpdating for dependencies:\n device-mapper                                           x86_64                           7:1.02.170-6.el7_9.5                           updates                           297 k\n device-mapper-libs                                      x86_64                           7:1.02.170-6.el7_9.5                           updates                           325 k\n\nTransaction Summary\n=================================================================================================================================================================================\nInstall  3 Packages (+5 Dependent packages)\nUpgrade             ( 2 Dependent packages)\n\nTotal download size: 4.4 M\nDownloading packages:\nDelta RPMs disabled because /usr/bin/applydeltarpm not installed.\n(1/10): device-mapper-event-1.02.170-6.el7_9.5.x86_64.rpm                                                                                                 | 192 kB  00:00:00     \n(2/10): device-mapper-1.02.170-6.el7_9.5.x86_64.rpm                                                                                                       | 297 kB  00:00:00     \n(3/10): device-mapper-libs-1.02.170-6.el7_9.5.x86_64.rpm                                                                                                  | 325 kB  00:00:00     \n(4/10): device-mapper-event-libs-1.02.170-6.el7_9.5.x86_64.rpm                                                                                            | 192 kB  00:00:00     \n(5/10): device-mapper-persistent-data-0.8.5-3.el7_9.2.x86_64.rpm                                                                                          | 423 kB  00:00:00     \n(6/10): lvm2-libs-2.02.187-6.el7_9.5.x86_64.rpm                                                                                                           | 1.1 MB  00:00:00     \n(7/10): lvm2-2.02.187-6.el7_9.5.x86_64.rpm                                                                                                                | 1.3 MB  00:00:00     \n(8/10): python-kitchen-1.1.1-5.el7.noarch.rpm                                                                                                             | 267 kB  00:00:00     \n(9/10): python-chardet-2.2.1-3.el7.noarch.rpm                                                                                                             | 227 kB  00:00:00     \n(10/10): yum-utils-1.1.31-54.el7_8.noarch.rpm                                                                                                             | 122 kB  00:00:00     \n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTotal                                                                                                                                             14 MB/s | 4.4 MB  00:00:00     \nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Updating   : 7:device-mapper-libs-1.02.170-6.el7_9.5.x86_64                                                                                                               1/12 \n  Updating   : 7:device-mapper-1.02.170-6.el7_9.5.x86_64                                                                                                                    2/12 \n  Installing : 7:device-mapper-event-libs-1.02.170-6.el7_9.5.x86_64                                                                                                         3/12 \n  Installing : 7:device-mapper-event-1.02.170-6.el7_9.5.x86_64                                                                                                              4/12 \n  Installing : 7:lvm2-libs-2.02.187-6.el7_9.5.x86_64                                                                                                                        5/12 \n  Installing : device-mapper-persistent-data-0.8.5-3.el7_9.2.x86_64                                                                                                         6/12 \n  Installing : python-chardet-2.2.1-3.el7.noarch                                                                                                                            7/12 \n  Installing : python-kitchen-1.1.1-5.el7.noarch                                                                                                                            8/12 \n  Installing : yum-utils-1.1.31-54.el7_8.noarch                                                                                                                             9/12 \n  Installing : 7:lvm2-2.02.187-6.el7_9.5.x86_64                                                                                                                            10/12 \n  Cleanup    : 7:device-mapper-libs-1.02.149-10.el7_6.8.x86_64                                                                                                             11/12 \n  Cleanup    : 7:device-mapper-1.02.149-10.el7_6.8.x86_64                                                                                                                  12/12 \n  Verifying  : 7:device-mapper-event-libs-1.02.170-6.el7_9.5.x86_64                                                                                                         1/12 \n  Verifying  : python-chardet-2.2.1-3.el7.noarch                                                                                                                            2/12 \n  Verifying  : 7:lvm2-libs-2.02.187-6.el7_9.5.x86_64                                                                                                                        3/12 \n  Verifying  : device-mapper-persistent-data-0.8.5-3.el7_9.2.x86_64                                                                                                         4/12 \n  Verifying  : 7:device-mapper-1.02.170-6.el7_9.5.x86_64                                                                                                                    5/12 \n  Verifying  : 7:device-mapper-event-1.02.170-6.el7_9.5.x86_64                                                                                                              6/12 \n  Verifying  : python-kitchen-1.1.1-5.el7.noarch                                                                                                                            7/12 \n  Verifying  : 7:lvm2-2.02.187-6.el7_9.5.x86_64                                                                                                                             8/12 \n  Verifying  : 7:device-mapper-libs-1.02.170-6.el7_9.5.x86_64                                                                                                               9/12 \n  Verifying  : yum-utils-1.1.31-54.el7_8.noarch                                                                                                                            10/12 \n  Verifying  : 7:device-mapper-libs-1.02.149-10.el7_6.8.x86_64                                                                                                             11/12 \n  Verifying  : 7:device-mapper-1.02.149-10.el7_6.8.x86_64                                                                                                                  12/12 \n\nInstalled:\n  device-mapper-persistent-data.x86_64 0:0.8.5-3.el7_9.2                  lvm2.x86_64 7:2.02.187-6.el7_9.5                  yum-utils.noarch 0:1.1.31-54.el7_8                 \n\nDependency Installed:\n  device-mapper-event.x86_64 7:1.02.170-6.el7_9.5 device-mapper-event-libs.x86_64 7:1.02.170-6.el7_9.5 lvm2-libs.x86_64 7:2.02.187-6.el7_9.5 python-chardet.noarch 0:2.2.1-3.el7\n  python-kitchen.noarch 0:1.1.1-5.el7            \n\nDependency Updated:\n  device-mapper.x86_64 7:1.02.170-6.el7_9.5                                            device-mapper-libs.x86_64 7:1.02.170-6.el7_9.5                                           \n\nComplete!\n设置一个yum源\n[root@zzx ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nLoaded plugins: fastestmirror\nadding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\ngrabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\nrepo saved to /etc/yum.repos.d/docker-ce.repo\n查看Docker可用版本有哪些\n[root@zzx ~]# yum list docker-ce --showduplicates | sort -r\nLoading mirror speeds from cached hostfile\nLoaded plugins: fastestmirror\ndocker-ce.x86_64            3:24.0.7-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:24.0.6-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:24.0.5-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:24.0.4-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:24.0.3-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:24.0.2-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:24.0.1-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:24.0.0-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:23.0.6-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:23.0.5-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:23.0.4-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:23.0.3-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:23.0.2-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:23.0.1-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:23.0.0-1.el7                      docker-ce-stable\ndocker-ce.x86_64            3:20.10.9-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.8-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.7-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.6-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.5-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.4-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.3-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.24-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.2-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.23-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.22-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.21-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.20-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.19-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.18-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.17-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.16-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.15-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.14-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:20.10.13-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.12-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.11-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.10-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:20.10.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.9-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.8-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.7-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.6-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.5-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.3-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.2-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.15-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:19.03.14-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:19.03.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.13-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:19.03.12-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:19.03.11-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:19.03.10-3.el7                    docker-ce-stable\ndocker-ce.x86_64            3:19.03.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable\ndocker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable\n * centos-sclo-rh: ftp.sjtu.edu.cn\nAvailable Packages\n选择一个版本并安装：yum install docker-ce-版本号\n[root@zzx ~]# yum -y install docker-ce-18.03.1.ce\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * centos-sclo-rh: ftp.sjtu.edu.cn\nResolving Dependencies\n--> Running transaction check\n---> Package docker-ce.x86_64 0:18.03.1.ce-1.el7.centos will be installed\n--> Processing Dependency: container-selinux >= 2.9 for package: docker-ce-18.03.1.ce-1.el7.centos.x86_64\n--> Processing Dependency: pigz for package: docker-ce-18.03.1.ce-1.el7.centos.x86_64\n--> Running transaction check\n---> Package container-selinux.noarch 2:2.119.2-1.911c772.el7_8 will be installed\n---> Package pigz.x86_64 0:2.3.4-1.el7 will be installed\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n=================================================================================================================================================================================\n Package                                    Arch                            Version                                              Repository                                 Size\n=================================================================================================================================================================================\nInstalling:\n docker-ce                                  x86_64                          18.03.1.ce-1.el7.centos                              docker-ce-stable                           35 M\nInstalling for dependencies:\n container-selinux                          noarch                          2:2.119.2-1.911c772.el7_8                            extras                                     40 k\n pigz                                       x86_64                          2.3.4-1.el7                                          epel                                       81 k\n\nTransaction Summary\n=================================================================================================================================================================================\nInstall  1 Package (+2 Dependent packages)\n\nTotal download size: 35 M\nInstalled size: 35 M\nDownloading packages:\n(1/3): container-selinux-2.119.2-1.911c772.el7_8.noarch.rpm                                                                                               |  40 kB  00:00:00     \n(2/3): pigz-2.3.4-1.el7.x86_64.rpm                                                                                                                        |  81 kB  00:00:00     \nwarning: /var/cache/yum/x86_64/7/docker-ce-stable/packages/docker-ce-18.03.1.ce-1.el7.centos.x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID 621e9f35: NOKEY MB  00:00:00 ETA \nPublic key for docker-ce-18.03.1.ce-1.el7.centos.x86_64.rpm is not installed\n(3/3): docker-ce-18.03.1.ce-1.el7.centos.x86_64.rpm                                                                                                       |  35 MB  00:00:02     \n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTotal                                                                                                                                             15 MB/s |  35 MB  00:00:02     \nRetrieving key from https://mirrors.aliyun.com/docker-ce/linux/centos/gpg\nImporting GPG key 0x621E9F35:\n Userid     : \"Docker Release (CE rpm) <docker@docker.com>\"\n Fingerprint: 060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35\n From       : https://mirrors.aliyun.com/docker-ce/linux/centos/gpg\nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : 2:container-selinux-2.119.2-1.911c772.el7_8.noarch                                                                                                            1/3 \nsetsebool:  SELinux is disabled.\n  Installing : pigz-2.3.4-1.el7.x86_64                                                                                                                                       2/3 \n  Installing : docker-ce-18.03.1.ce-1.el7.centos.x86_64                                                                                                                      3/3 \n  Verifying  : pigz-2.3.4-1.el7.x86_64                                                                                                                                       1/3 \n  Verifying  : docker-ce-18.03.1.ce-1.el7.centos.x86_64                                                                                                                      2/3 \n  Verifying  : 2:container-selinux-2.119.2-1.911c772.el7_8.noarch                                                                                                            3/3 \n\nInstalled:\n  docker-ce.x86_64 0:18.03.1.ce-1.el7.centos                                                                                                                                     \n\nDependency Installed:\n  container-selinux.noarch 2:2.119.2-1.911c772.el7_8                                                  pigz.x86_64 0:2.3.4-1.el7                                                 \n\nComplete!\n启动 Docker 并设置开机自启\n[root@zzx ~]# systemctl start docker\n[root@zzx ~]# systemctl enable docker\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n验证\n[root@zzx ~]# docker version\nClient:\n Version:      18.03.1-ce\n API version:  1.37\n Go version:   go1.9.5\n Git commit:   9ee9f40\n Built:        Thu Apr 26 07:20:16 2018\n OS/Arch:      linux/amd64\n Experimental: false\n Orchestrator: swarm\n\nServer:\n Engine:\n  Version:      18.03.1-ce\n  API version:  1.37 (minimum version 1.12)\n  Go version:   go1.9.5\n  Git commit:   9ee9f40\n  Built:        Thu Apr 26 07:23:58 2018\n  OS/Arch:      linux/amd64\n  Experimental: false\n[root@zzx ~]# \n```\n\n# 二、linux系统docker安装minio并部署\n\n## （1）docker安装\n\n详情请看：P1\n\n\n\n## （2）docker安装配置minio\n\n该部分基本照抄这篇博客，找了很多资料和博客，就这篇最靠谱：[Docker 搭建 Minio 对象存储服务 - 掘金 (juejin.cn)](https://juejin.cn/post/7203258813893345340)\n\n### MinIO\n\nMinIO 是一款基于 Go 语言发开的高性能、分布式的对象存储系统，客户端支持 Java，Net，Python，Javacript，Golang语言。\n\nMinIO 的主要目标是作为私有云对象存储的标准方案，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据、容器和虚拟机镜像等，而一个对象文件可以是任意大小，从几 kb 到最大 5T。\n\n如果有搭建私有对象存储服务的需求，MinIO 非常适合。本文将介绍使用 Docker 快速搭建一个 MinIO 服务。\n\n### 使用 Docker 部署 MinIO 服务\n\n在 Docker Hub 搜索 MinIO 相关镜像，使用这一个：\n\n[![ngYO5.png](https://i.imgs.ovh/2023/11/16/ngYO5.png)](https://imgloc.com/image/ngYO5)\n\n按照文档的说明，下载镜像：\n\n```shell\nshell\n复制代码$ docker pull bitnami/minio\n```\n\n查看下载好的镜像：\n\n```bash\nbash复制代码$ docker images\nREPOSITORY            TAG       IMAGE ID       CREATED             SIZE\nbitnami/minio         latest    5ce0a7a9aaff   About an hour ago   218MB\n```\n\n创建数据卷目录，并提升权限：\n\n```shell\nshell复制代码$ mkdir -p /minio1/data\n$ chmod -R 777 /minio/data\n```\n\n使用镜像启动一个 `minio` 容器：\n\n```ini\nini复制代码$ docker run -it -d --name minio \\\n-p 9000:9000 -p 9001:9001 \\\n-v /minio/data:/data \\\n-e MINIO_ROOT_USER=\"minio_root\" \\\n-e MINIO_ROOT_PASSWORD=\"minio_123456\" \\\nbitnami/minio:latest\n```\n\n参数说明：\n\n- -it：-i 表示以交互模式运行容器，-t 表示为容器重新分配一个伪输入终端，两个参数必须结合使用才能启动一个容器\n- -d：以守护进程方式来启动容器，这也是常用参数，防止阻塞当前窗口\n- -p 9000:9000：MinIO 服务会暴露 9000 端口来对外提供对象访问，也就是通过此端口运行的服务来访问资源\n- -p 9001:9001：MinIO 服务会提供一个可视化管理系统，默认在 9001 端口运行\n- -v /minio/data:/data：挂载数据卷，将 minio 容器内存储的文件映射到宿主机\n- -e MINIO_ROOT_USER=\"minio_root\"：设置 root 用户名\n- -e MINIO_ROOT_PASSWORD=\"minio_123456\"：设置 root 的密码，长度至少 8 位\n\n在 minio 镜像的文档中提到了：\n\n> Make sure that the environment variables `MINIO_ROOT_PASSWORD` and `MINIO_SERVER_SECRET_KEY` meet the 8 character minimum length requirement enforced by MinIO(R).\n\n也就是通过环境变量 `MINIO_ROOT_PASSWORD` 设置 root 用户密码时，长度至少为 8 位，这一点需要注意。\n\n查看 minio 容器的启动日志：\n\n```ruby\nruby\n复制代码$ docker lgos minio -f\n```\n\n可以看到一些关键信息：\n\n`API` 也就是对外提供资源存取服务的地址，`Console` 是控制台，也就是一个后台管理系统。`RootUser` 是通过环境变量设置的 root 用户名，`RootPass` 是 root 用户密码。创建容器时没有指定这两个环境变量的话，这里会提供两个默认的值，分别是 `minio` 和 `miniosecret`。\n\n[![ngDlX.png](https://i.imgs.ovh/2023/11/16/ngDlX.png)](https://imgloc.com/image/ngDlX)\n\n查看 minio 容器的信息：\n\n```ruby\nruby\n复制代码$ docker ps\n```\n\n可以看到容器的 ID，所使用的的镜像，运行状态，端口等信息： [![ngdEs.png](https://i.imgs.ovh/2023/11/16/ngdEs.png)](https://imgloc.com/image/ngdEs)\n\n### 开放安全组端口\n\nMinIO 服务用到了 9000 和 9001 端口，如果使用的是云服务器，需要在安全组中开放端口：\n\n[![ngEKU.png](https://i.imgs.ovh/2023/11/16/ngEKU.png)](https://imgloc.com/image/ngEKU)\n\n### 访问 MinIO\n\n打开浏览器，访问 `域名:9001` 或者 `IP:9001` ，即可访问 MinIO 服务的管理系统，使用设置好的用户名和密码，登录系统：\n\n[![ngT40.png](https://i.imgs.ovh/2023/11/16/ngT40.png)](https://imgloc.com/image/ngT40)\n\n进入系统首页，默认展示存储桶列表，由于现在是一个新的服务，所以还是空的：\n\n[![ng9XC.png](https://i.imgs.ovh/2023/11/16/ng9XC.png)](https://imgloc.com/image/ng9XC)\n\n### 创建桶\n\n根据提示，点击 “Create a Bucket” 开始创建第一个存储桶：\n\n[![ngG0t.png](https://i.imgs.ovh/2023/11/16/ngG0t.png)](https://imgloc.com/image/ngG0t)\n\n点击按钮即可完成桶的创建，如下，是刚刚创建的存储桶的卡片展示：\n\n[![ngN1m.png](https://i.imgs.ovh/2023/11/16/ngN1m.png)](https://imgloc.com/image/ngN1m)\n\n[![ngaaN.png](https://i.imgs.ovh/2023/11/16/ngaaN.png)](https://imgloc.com/image/ngaaN)\n\n### 上传文件\n\n[![ngy3R.png](https://i.imgs.ovh/2023/11/16/ngy3R.png)](https://imgloc.com/image/ngy3R)\n\n上方的路径可以复制下来，拼接上 MinIO 服务的地址，就是此文件的 URL 了。一定要把桶的访问策略改为 Public，否则访问此 URL 将返回 403。\n\n> 另外可在域名解析（这个要在云服务中）中，将ip解析到域名中，从而避免保留ip，就像下图一样，可自行查阅资料。\n\n[![ntCQp.png](https://i.imgs.ovh/2023/11/16/ntCQp.png)](https://imgloc.com/image/ntCQp)\n\n## （3）最后\n\n通过 Docker 快速部署了一个简单易用的对象存储服务 MinIO，它提供的用户界面也非常友好。\n\n# 三、Spring boot集成Minio并应用\n\n## （1）引言\n\nMinIO是一个开源的对象存储服务器，设计用于存储和检索大量的数据对象，例如文本数据、图像、视频和其他类型的文件。它提供了分布式存储、高可用性和可扩展性，并支持S3协议，这使得它兼容很多与云存储相关的应用和工具。\n\n以下是MinIO的一些主要作用和特点：\n\n1. **对象存储：** MinIO专注于对象存储，允许用户将文件以对象的形式存储。这些对象可以是任何类型的数据，例如文本、图像、视频等。\n\n2. **分布式存储：** MinIO可以部署为分布式系统，允许在多个节点上存储和检索数据。这样的设计提供了高可用性和可伸缩性，因为数据可以分散存储在不同的节点上，而且如果某个节点失败，系统仍然能够正常运行。\n\n3. **S3兼容性：** MinIO支持Amazon S3协议，这意味着它可以与使用S3协议的许多应用和工具进行集成。这使得MinIO成为一个强大的对象存储解决方案，可以轻松替代或与云存储服务（如Amazon S3）配合使用。\n\n4. **开源和可定制：** 作为开源项目，MinIO的源代码是公开的，用户可以根据自己的需求进行定制和修改。这种开放性使得开发者能够根据具体的场景和需求对MinIO进行灵活的配置和扩展。\n\n5. **用于构建私有云存储：** 由于MinIO的设计目标是提供私有云存储解决方案，它适用于那些希望在本地或私有环境中构建存储基础设施的组织。\n\n总体而言，MinIO为开发者提供了一个功能强大的对象存储解决方案，旨在满足大规模数据存储和检索的需求。\n\n## （2）集成前提\n\n已经安装了minio程序并部署成功，如在docker上。如未安装，可参考本文P2\n\n## （3）集成步骤\n\n借鉴博客：[SpringBoot2整合minio - dkn - 博客园 (cnblogs.com)](https://www.cnblogs.com/daikainan/p/14413759.html)\n\n### 1.引入依赖\n\n尽可能新，如出现bug可尝试换版本，视springboot版本而定。\n\n```xml\n<!--Minio-->\n<!-- https://mvnrepository.com/artifact/io.minio/minio -->\n<dependency>\n    <groupId>io.minio</groupId>\n    <artifactId>minio</artifactId>\n    <version>8.3.4</version>\n</dependency>\n```\n\n### 2.设置配置文件\n\n#### 2.1 设置minio参数\n\n![nUl2v.png](https://i.imgs.ovh/2023/11/16/nUl2v.png)\n\n如出现报错，可按下方方式解决（来自博客：[Minio上传图片时遇到的问题S3 API Requests must be made to API port._minio 上传失败_Micek的博客-CSDN博客](https://blog.csdn.net/Gracener/article/details/127820613?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-127820613-blog-127102500.235^v38^pc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-127820613-blog-127102500.235^v38^pc_relevant_anti_t3_base&utm_relevant_index=5)）\n\n![nUHU3.png](https://i.imgs.ovh/2023/11/16/nUHU3.png)\n\n#### 2.2 文件上传配置\n\n```yml\nspring:\n  # 文件上传\n  servlet:\n    multipart:\n      # 启动开关\n      enabled: true\n      # 文件大小限制\n      max-file-size: 50MB\n      # 限制整个请求的大小，包括所有文件和其他部分\n      max-request-size: 100MB\n```\n\n可根据自身情况设置，具体参数说明如下：\n\n> 除了设置文件上传的大小限制之外，您可以通过其他属性来细化配置文件上传，以提高安全性和控制。以下是一些可能有用的属性：\n>\n> 1. **`spring.servlet.multipart.max-request-size`：** 该属性限制整个请求的大小，包括所有文件和其他部分。如果请求超过此大小，将拒绝上传。例如：\n>\n>    ```yaml\n>    spring:\n>      servlet:\n>        multipart:\n>          max-request-size: 100MB\n>    ```\n>\n> 2. **`spring.servlet.multipart.file-size-threshold`：** 该属性设置一个阈值，低于该阈值的文件将保留在内存中，而不写入磁盘。高于该阈值的文件将被写入磁盘。这可以帮助提高性能并减少磁盘IO。例如：\n>\n>    ```yaml\n>    spring:\n>      servlet:\n>        multipart:\n>          file-size-threshold: 2KB\n>    ```\n>\n> 3. **`spring.servlet.multipart.location`：** 如果希望将所有上传的文件保存到特定目录而不是默认的临时目录，可以使用此属性。例如：\n>\n>    ```yaml\n>    spring:\n>      servlet:\n>        multipart:\n>          location: /path/to/upload/directory\n>    ```\n>\n> 4. **`spring.servlet.multipart.enabled`：** 可以使用此属性来禁用或启用文件上传功能。默认情况下，它是启用的。例如：\n>\n>    ```yaml\n>    spring:\n>      servlet:\n>        multipart:\n>          enabled: false\n>    ```\n>\n> 5. **`spring.servlet.multipart.resolve-lazily`：** 默认情况下，Spring Boot在请求处理时解析`MultipartFile`，但您可以通过将此属性设置为`true`来推迟解析，直到实际需要访问文件内容时才进行解析。这可以减少内存占用。例如：\n>\n>    ```yaml\n>    spring:\n>      servlet:\n>        multipart:\n>          resolve-lazily: true\n>    ```\n>\n> 这些属性可以根据您的需求进行调整，以提高文件上传的安全性和性能。确保根据您的应用程序的要求和环境来选择适当的配置。\n\n### 3. 编写配置类\n\n```java\npackage sspu.zzx.sspuoj.utils.file.minio;\n\nimport io.minio.MinioClient;\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Data\n@Configuration\npublic class MinioConfig\n{\n    @Value(\"${minio.endpoint}\")\n    private String endpoint;\n    @Value(\"${minio.accessKey}\")\n    private String accessKey;\n    @Value(\"${minio.secretKey}\")\n    private String secretKey;\n    @Value(\"${minio.bucketName}\")\n    private String bucketNameImage;\n\n    @Bean\n    public MinioClient minioClient()\n    {\n        MinioClient minioClient = MinioClient.builder().endpoint(endpoint).credentials(accessKey, secretKey).build();\n        return minioClient;\n    }\n\n}\n```\n\n### 4. 编写工具类\n\n```java\npackage sspu.zzx.sspuoj.utils.file.minio;\n\nimport io.minio.*;\nimport io.minio.http.Method;\nimport io.minio.messages.Item;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * 参考 https://github.com/minio/minio-java/tree/master/examples\n */\n\n@Service\n@Slf4j\npublic class MinioUtils\n{\n    @Autowired\n    MinioConfig minioConfig;\n    @Autowired\n    MinioClient minioClient;\n\n    //获取列表\n    public List<String> listObjects() {\n        List<String> list=new ArrayList<>();\n        try {\n\n            ListObjectsArgs listObjectsArgs = ListObjectsArgs.builder()\n                    .bucket(minioConfig.getBucketNameImage())\n                    .build();\n\n            Iterable<Result<Item>> results =minioClient.listObjects(listObjectsArgs);\n            for (Result<Item> result : results) {\n                Item item = result.get();\n                log.info(item.lastModified() + \", \" + item.size() + \", \" + item.objectName());\n                list.add(item.objectName());\n            }\n        }catch (Exception e){\n            log.error(\"错误：\"+e.getMessage());\n        }\n        return list;\n    }\n\n    //删除\n    public void deleteObject(String objectName) {\n        try {\n            RemoveObjectArgs removeObjectArgs = RemoveObjectArgs.builder()\n                    .bucket(minioConfig.getBucketNameImage())\n                    .object(objectName)\n                    .build();\n            minioClient.removeObject(removeObjectArgs);\n        }catch (Exception e){\n            log.error(\"错误：\"+e.getMessage());\n        }\n    }\n\n    //上传\n    public void uploadObject(InputStream is,String fileName,String contentType) {\n        try {\n            PutObjectArgs putObjectArgs = PutObjectArgs.builder()\n                    .bucket(minioConfig.getBucketNameImage())\n                    .object(fileName)\n                    .contentType(contentType)\n                    .stream(is, is.available(), -1)\n                    .build();\n            minioClient.putObject(putObjectArgs);\n            is.close();\n        }catch (Exception e){\n            log.error(\"错误：\"+e.getMessage());\n        }\n    }\n\n    //获取minio中地址\n    public String getObjectUrl(String objectName){\n        try {\n            GetPresignedObjectUrlArgs getPresignedObjectUrlArgs = GetPresignedObjectUrlArgs.builder()\n                    .method(Method.GET)\n                    .bucket(minioConfig.getBucketNameImage())\n                    .object(objectName)\n                    .expiry(7, TimeUnit.DAYS)\n                    .build();\n            return minioClient.getPresignedObjectUrl(getPresignedObjectUrlArgs);\n        }catch (Exception e){\n            e.printStackTrace();\n            log.error(\"错误：\"+e.getMessage());\n        }\n        return \"\";\n    }\n\n\n\n    //下载minio服务的文件\n    public InputStream getObject(String objectName){\n        try {\n            GetObjectArgs getObjectArgs = GetObjectArgs.builder()\n                    .bucket(minioConfig.getBucketNameImage())\n                    .object(objectName)\n                    .build();\n            return minioClient.getObject(getObjectArgs);\n        }catch (Exception e){\n            log.error(\"错误：\"+e.getMessage());\n        }\n        return null;\n    }\n\n\n}\n```\n\n### 5. 编写测试类\n\nBaseResponse和ResultUtils为通用返回类，可自行创建\n\n```java\npackage sspu.zzx.sspuoj.controller;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport sspu.zzx.sspuoj.common.BaseResponse;\nimport sspu.zzx.sspuoj.common.ErrorCode;\nimport sspu.zzx.sspuoj.common.ResultUtils;\nimport sspu.zzx.sspuoj.exception.BusinessException;\nimport sspu.zzx.sspuoj.utils.file.minio.MinioUtils;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.InputStream;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/minio\")\npublic class MinioController\n{\n\n    @Autowired\n    MinioUtils minioService;\n\n    //列表\n    @GetMapping(\"/list\")\n    public BaseResponse<List<String>> list()\n    {\n        List<String> strings = minioService.listObjects();\n        return ResultUtils.success(strings);\n    }\n\n    //删除\n    @PutMapping(\"/delete\")\n    public BaseResponse<Boolean> delete(@RequestParam String filename)\n    {\n        minioService.deleteObject(filename);\n        return ResultUtils.success(true);\n    }\n\n    //上传文件\n    @PostMapping(\"/upload\")\n    public BaseResponse<String> upload(@RequestParam(\"file\") MultipartFile file)\n    {\n        try\n        {\n            // todo 完善文件命名逻辑\n            InputStream is = file.getInputStream(); //得到文件流\n            String fileName = file.getOriginalFilename(); //文件名\n            String newFileName = System.currentTimeMillis() + \".\" + StringUtils.substringAfterLast(fileName, \".\");\n            // todo 完善类型校验逻辑\n            String contentType = file.getContentType();  //类型\n            minioService.uploadObject(is, newFileName, contentType);\n            return ResultUtils.success(newFileName);\n        } catch (Exception e)\n        {\n            throw new BusinessException(ErrorCode.OPERATION_ERROR, \"上传失败\");\n        }\n    }\n\n    //下载minio服务的文件\n    @GetMapping(\"/download\")\n    public void download(@RequestParam String filename, HttpServletResponse response)\n    {\n        try\n        {\n            InputStream fileInputStream = minioService.getObject(filename);\n            // todo 完善文件命名逻辑\n            String newFileName = System.currentTimeMillis() + \".\" + StringUtils.substringAfterLast(filename, \".\");\n            response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + newFileName);\n            response.setContentType(\"application/force-download\");\n            response.setCharacterEncoding(\"UTF-8\");\n            IOUtils.copy(fileInputStream, response.getOutputStream());\n        } catch (Exception e)\n        {\n            throw new BusinessException(ErrorCode.OPERATION_ERROR, \"下载失败\");\n        }\n    }\n\n    //获取minio文件的下载地址\n    @GetMapping(\"/getHttpUrl\")\n    public BaseResponse<String> getHttpUrl(@RequestParam String filename)\n    {\n        try\n        {\n            String url = minioService.getObjectUrl(filename);\n            return ResultUtils.success(url);\n        } catch (Exception e)\n        {\n            throw new BusinessException(ErrorCode.OPERATION_ERROR, e.getMessage());\n        }\n    }\n\n\n}\n```\n\n### 6. 测试\n\n其他接口请自行测试。\n\n![nUnhe.png](https://i.imgs.ovh/2023/11/16/nUnhe.png)\n\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1721896042632441858/43izDVMc-minio-springboot.png",
        "language": null,
        "viewNum": 6,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1721896042632441858",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-17T05:06:39.000+00:00",
        "updateTime": "2023-11-17T08:00:36.000+00:00",
        "user": {
          "id": "1721896042632441858",
          "planetCode": "29240",
          "userName": "南侠（准）",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELkfM4IsxxWrB70flGuaDcq55mDxh8r4DuwOJLuluSmRCH9Pk1MFibry5icVgHtfwMmnYGqT49svVKV3X1wMer2OCC3ob5leZX5lF8HMbPo1Qww/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-11-05T14:14:23.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-11-07T14:23:02.000+00:00",
          "updateTime": "2023-11-09T14:34:06.000+00:00"
        },
        "tags": [
          "文章",
          "后端",
          "笔记",
          "Java",
          "Linux",
          "教程"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1725367176719888386",
        "title": "前端-简历",
        "description": "https://laoyujianli.com/i_share/bmq2Fi",
        "content": "<p>本人在21年本科毕业后，没有选择第一时间找工作，参加了考研，但最终没能上岸，在第二年也是今年，在一边做着其他的工作，并且还在尝试想能不能找到前端的工作，情况很尴尬，0工作经验，也不是应届生，所以希望大家能帮我在这个简历上能给点建议，或者说还需要在学习点什么技术类似的建议，谢谢（虽然我时常问自己是不是这个时候再去找前端已经凉的不能再凉了）</p>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 4,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1667172617829756929",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-17T04:16:05.000+00:00",
        "updateTime": "2023-11-17T08:13:32.000+00:00",
        "user": {
          "id": "1667172617829756929",
          "planetCode": "14670",
          "userName": "顾清欢",
          "userAvatar": null,
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "前端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-11-13T06:00:25.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-09T14:11:41.000+00:00",
          "updateTime": "2023-11-16T14:26:09.000+00:00"
        },
        "tags": [
          "简历"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1725148375260721153",
        "title": "大四-前端-校招简历",
        "description": "https://www.laoyujianli.com/i_share/7E3rGP",
        "content": "<p><strong>个人背景</strong></p><p><span style=\"color:#262626\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">我是24届的应届毕业生，目前在北京的货拉拉公司做前端开发实习生。自己之前的秋招不是很顺利，所以就先找了一个实习，目前实习大概1个月吧，现在公司的业务比较熟悉，项目也能够上手了。所以，自己空闲的时间就又投了投简历，但是投了一周，一个面试都没有，不是很理想。</span></span></span></p><p></p><p><strong>简历介绍</strong></p><ul><li><span style=\"color:#262626\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">熟练掌握前端开发，包括 VUE3 和 React 相关技术栈</span></span></span></li><li><span style=\"color:#262626\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">熟悉 WEB 3D 和 GIS 可视化开发，如：Blender、THREE.JS、WebGL、Cesium、AMap等</span></span></span></li><li><span style=\"color:#262626\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">了解后台开发，如：Django、Flask、Linux等。</span></span></span></li></ul><p></p><p><strong>咨询问题</strong></p><ol><li>简历上面需要优化的点有哪些？如何优化？</li><li>在当前这个阶段我是继续投递秋招剩下的岗位，还是专心实习，备战春招？</li><li>实习的 leader 每天很忙，根本没时间带新人，每天就是给个需求让自己完成，这种我该怎么处理？</li><li>自己有后端基础，感觉 Java 的强类型设计思想蛮重要的，前端也需要后台的设计思想，如何计划时间学习星球的后台开发项目？</li><li>老师和学长对我说，普通的前端开发很难形成自己的技术优势，而且比较卷，需要配合 3D + GIS 这部分，不知道有什么建议不？</li><li>未来我打算走前端 + 3D可视化开发偏全栈的路线，如果想达到大厂的要求，我目前的情况，应该如何学习？</li><li>目前，我这一个月在学习 React ，有什么好的实践项目锻炼自己的能力吗？</li></ol>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 14,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1613124730557038593",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-16T13:46:39.000+00:00",
        "updateTime": "2023-11-17T07:51:48.000+00:00",
        "user": {
          "id": "1613124730557038593",
          "planetCode": "26294",
          "userName": "bosom",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2vlAsuxPP5cZicmYKwdD4aNwdhg2VpYm4Ocy2yAqCAjVmuGHgc38TpYGSRvIZCX9dkbgFs2fBuew/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-08-25T08:11:16.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-11T10:44:40.000+00:00",
          "updateTime": "2023-11-16T12:04:01.000+00:00"
        },
        "tags": [
          "简历",
          "校招",
          "前端"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1725027380864610306",
        "title": "sql使用函数查询/更新json中某一个字段",
        "description": "sql使用函数查询/更新json中某一个字段，记录处理方案",
        "content": "## 背景\n\n在日常开发中，我们经常会在数据库里存放一个大json对象来保留一些详细的信息，但是有时候我们只需要里面的一个或者几个字段，并不需要全部查询出来，包括在更新信息的时候，我们也只需要更新其中的一个或者几个字段，如果在实际业务中我们也不可能每次都更新这么大一个字段，本文就详细讲一下怎么实现该操作。\n\n## 知识\n\n该函数是Mysql5.7版本之后提供的新功能，JSON不再以字符串的方式存储，而是以一种快速读取文本元素的方式执行，JSON_EXTRACT() 函数使用 JSONPath 语法来提取 JSON 对象中的值。JSONPath 语法是一种用于在 JSON 对象中查找值的表达式语言。JSONPath 语法的基本元素是美元符号 ($)，它表示 JSON 对象的根元素。例如：`$.name`，同理JSON_SET 也是通过这种方式去修改。\n\n## 使用方式\n\n### 查询json中某一个字段\n\n```json\n{\n  \"wayBill\":{\n    \"totalAmount\":200'\n  }\n}\n```\n\n```sql\nselect  JSON_EXTRACT(ri.data_json, '$.wayBill.totalAmount') as totalAmount from xxx\n```\n\n### 更新json中某一个字段\n\n> 示例json\n\n```json\n{\n  \"userInfo\":{\n    \"name\":\"小糖豆\",\n    \"age\":20,\n    \"sex\":0\n  }\n}\n```\n\n```sql\nupdate\nuser_info\nset\nuser_detail = json_set(user_detail, '$.name', '猪八戒')\nwhere id = xxx\n```\n\n### 更新json中多个字段\n\n```sql\nupdate\nuser_info\nset\nuser_info = json_set(user_info, '$.age', 12,'$.sex',1)\nwhere id = xxx\n```\n\n我们explain看一下sql的执行计划\n\n![image-20231116105540863](https://pic-es.oss-cn-shanghai.aliyuncs.com/study-pic/202311161055014.png)\n\n可见这个函数并不会使索引失效。\n\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1630821133601288193/MSL6varZ-可爱002.jpg",
        "language": null,
        "viewNum": 4,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1630821133601288193",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-16T05:45:51.000+00:00",
        "updateTime": "2023-11-16T12:18:39.000+00:00",
        "user": {
          "id": "1630821133601288193",
          "planetCode": "9414",
          "userName": "小糖豆",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1630821133601288193/8ZwBYNWO-aaaa.jpg",
          "gender": 0,
          "userProfile": "一名刚毕业没多久的后端开发者，希望可以在这个圈子学到更多知识。",
          "userRole": "vip",
          "interests": [],
          "place": "北京",
          "birthday": "2000-12-16",
          "school": "",
          "major": "软件工程",
          "education": "一本",
          "graduationYear": 2023,
          "jobStatus": "已工作",
          "company": null,
          "job": "后端",
          "workYear": 1,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/hynzdc",
          "blog": "https://www.sweetmore.cn/",
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-06-04T14:02:41.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-03-01T06:43:52.000+00:00",
          "updateTime": "2023-11-15T06:21:15.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "后端"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1725008507113172994",
        "title": "前端实现主题换肤实践",
        "description": "通过讲解项目中实现切换暗黑模式的方案、tailwind和unocss主题切换，了解前端主题切换方案中CSS变量 + 类名切换来实现主题切换的方法",
        "content": "<a name=\"tCHyK\"></a>\n### 实战引入：**CSS变量 + 类名切换**\n> 通过arcodesign组件库的使用来了解如何切换主题\n\n**主要思路：CSS变量 + 类名切换（组件库提供/自己定义） + 将当前主题模式设置到localStorage + vuex状态管理theme**\n\n1. 定义CSS变量：因为CSS变量组件库已经配好一套黑白变量了，直接拿来用[https://arco.design/vue/docs/token](https://arco.design/vue/docs/token)\n![image.png](https://pic.code-nav.cn/post_picture/1619654407350222850/a4peiNzZ-image.png)\n2. 为body标签添加相关的属性，参考arcodesign官网：\n<br />\n![image.png](https://pic.code-nav.cn/post_picture/1619654407350222850/2woBHU39-image.png)\n设置到localStorage防止刷新之后主题恢复成默认的配置\n\n```javascript\nconst isLight = ref();\nconst theme = ref();\nconst toggleLight = () => {\n  isLight.value = true;\n  // 恢复亮色主题\n  document.body.removeAttribute(\"arco-theme\");\n  localStorage.setItem(\"theme\", \"light\");\n};\nconst toggleDark = () => {\n  isLight.value = false;\n  // 设置为暗黑主题\n  document.body.setAttribute(\"arco-theme\", \"dark\");\n  localStorage.setItem(\"theme\", \"dark\");\n};\nonMounted(() => {\n  theme.value = localStorage.getItem(\"theme\");\n  if (theme.value === \"light\") {\n    toggleLight();\n  } else {\n    toggleDark();\n  }\n});\n```\n3. 将一些写死的样式改为变量：\n<br />\n![image.png](https://pic.code-nav.cn/post_picture/1619654407350222850/w8GBgjLa-image.png)\n<br />\n如果发现官网设计的变量不够，想自己加，可以参考：\n<br />[https://arco.design/vue/docs/theme](https://arco.design/vue/docs/theme)\n<br />利用组件库平台提供去配置主题：\n<br />[https://arco.design/docs/designlab/guideline](https://arco.design/docs/designlab/guideline)\n<a name=\"fOPlj\"></a>\n### Tailwind颜色主题切换\nhtml 代码\n```html\n<div class=\"relative flex flex-col justify-center overflow-hidden bg-gray-50 py-6 sm:py-12\">\n  <div class=\"relative px-6 pt-10 pb-8 shadow-xl ring-1 ring-gray-900/5 sm:mx-auto sm:max-w-lg sm:rounded-lg sm:px-10\">\n    <div class=\"mx-auto max-w-md\">\n      <div class=\"divide-y divide-gray-300/50\">\n        <div class=\"space-y-6 py-8 text-base leading-7 text-gray-600\">\n          <div class=\"font-medium text-xl\"></div>\n          <p class=\"text-xl font-bold text-gray-90 text-center\">Thank you \uD83D\uDE4F</p>\n          <div class=\"text-sm text-gray-500\">We appreciate your support.</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n</div>\n```\n**更多颜色：**[**https://tailwindcss.com/docs/customizing-colors**](https://tailwindcss.com/docs/customizing-colors)<br />配置文件中进行配置：**style.css**，将一些基础样式添加到 Tailwind 的基础层，定义颜色变量\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/*如果你想为特定的 HTML 元素添加自己默认的基础样式\n使用@layer 指令将这些样式添加到 Tailwind 的基础层*/\n@layer base {\n  .theme-light {\n    --color-base: theme('colors.white'); \n    --color-text-base: theme('colors.black'); \n    --color-off-base: theme('colors.gray.50');\n    --color-text-muted: theme('colors.gray.600');\n    --color-text-muted-hover: theme('colors.gray.500'); \n    --color-primary: theme('colors.blue.600'); \n    --color-secondary:theme('colors.blue.300'); \n  }\n\n  .theme-dark {\n    --color-base: theme('colors.gray.900');\n    --color-text-base: theme('colors.gray.100'); \n    --color-off-base: theme('colors.gray.800'); \n    --color-text-muted:theme('colors.gray.300'); \n    --color-text-muted-hover: theme('colors.gray.200');\n    --color-primary: theme('colors.blue.500'); \n    --color-secondary: theme('colors.blue.200'); \n  }\n}\n```\n配置文件中进行配置：**tailwind.config.js**，定义了一些背景色和文本颜色的 utility classes\n```javascript\nmodule.exports = {\n  mode: 'jit',\n  theme: {\n    extend: {},\n    backgroundColor: {\n      //utilities like `bg-base` and `bg-primary`\n      base: 'var(--color-base)',\n      'off-base': 'var(--color-off-base)',\n      primary: 'var(--color-primary)',\n      secondary: 'var(--color-secondary)',\n      muted: 'var(--color-text-muted)',\n    },\n    textColor: {\n      //like `text-base` and `text-primary`\n      base: 'var(--color-text-base)',\n      muted: 'var(--color-text-muted)',\n      'muted-hover': 'var(--color-text-muted-hover)',\n      primary: 'var(--color-primary)',\n      secondary: 'var(--color-secondary)',\n    },\n  },\n  variants: {},\n  plugins: [],\n}\n```\n在html相关的地方添加上相关的class就行了：<br />例如，<br />在需要应用相应主题样式的地方的父元素或自身元素上添加主题的标签: `theme-light`<br />在需要改变背景的地方添加上：`bg-base`<br />\n![image.png](https://pic.code-nav.cn/post_picture/1619654407350222850/NXlnk08t-image.png)\n<br />代码：[Tailwind Play](https://play.tailwindcss.com/pGH5RsrfJ0)\n<a name=\"jGfTh\"></a>\n### unocss颜色主题切换\nhtml代码\n```html\n<div class=\"relative flex flex-col justify-center overflow-hidden bg-gray-50 py-6 sm:py-12\">\n  <div class=\"relative px-6 pt-10 pb-8 shadow-xl ring-1 ring-gray-900/5 sm:mx-auto sm:max-w-lg sm:rounded-lg sm:px-10\">\n    <div class=\"mx-auto max-w-md\">\n      <div class=\"divide-y divide-gray-300/50\">\n        <div class=\"space-y-6 py-8 text-base leading-7 text-gray-600\">\n          <div class=\"font-medium text-xl\"></div>\n          <p class=\"text-xl font-bold text-gray-90 text-center\">Thank you \uD83D\uDE4F</p>\n          <div class=\"text-sm text-base\">We appreciate your support.</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n</div>\n```\n配置文件中**unocss.config.ts**进行配置**shortcut**\n```javascript\nexport default defineConfig({\n    ... ...\n    shortcuts:{\n        'bg-base': 'bg-[#ffffff] dark:bg-[#20202a]',\n        'card-base': 'bg-[#ffffff] dark:bg-[#10101a]',\n        'text-base': 'text-[#20202a] dark:text-[#f0f0f0]',\n    },\n    ... ...\n})\n```\n在html添加相关标签就行<br />代码：[UnoCSS Playground](https://unocss.dev/play/?html=DwEwlgbgBAxgNgQwM5ILwCIQIE4GsrYCmiALpIVAGZyEAeVNtAtDAPZxQBWArkmZQE8WhAHYlC2KKwgTqrAO5MAFmBAhRUAEYBzJtuwIhAVgAMUAA5CAbFCQBbAFyWmARgBM6AHwAoKFFCQsIgoGDpMmsgURKTkWrryKuIWzDbmJK5m5ppMABy2SgggCky0HNhgIrouBBW6%2BoZMAJwmJgD0RraOdswI3CSsnQ52CMyKcNqD2KzcIuogTOOD5swuJl6%2Bfv7g0PDIaOjdTL39UMOjTHYg65ubATvB%2B9uqhEwCUE-qegZCAMwt7WsfDcbncgnsMEhzAgYC9rBYhHlxLR0hEkBQaIVakwAOxQJHperWFrXYEg7ZgkLoSisMQXQjgbh2PF0dKlLzAVrbIGk27mCn7fElDjU2madggZnIr4NZqS9IwsQSLwAFQKInwAmmUEAvBuAeT2OeZuTytoFdpTBfY5eFIl4AOoUBDmcxEGBgBBJTXcSRIbhO1jYEgAOg5XI2pJDkCNt05kbD-hjEG5EcT3mTPjTqfJZv20XdsWodAYdBY7C4vH4QgV4kk0lkcGKKjUGjChKYpnhTBs9icQncJNB2dCulRUWIeZkcSYCTASWWnYs6VWFmyeSQBSKilKNUqrm3dW%2BTX%2BHW7h2OAxPIynCwm3amMzm16WK0BcYHDwwp76AzOV8uJLJprvpgkDPK87wgZ8rZ-G0pj-sCb7gugkLQrC87OIiLLWmiUAYuAO64oKrZWMSUbhlmQEiukdj0mAjJWmyngZsafjAHyg7oIKW6UeE4pWq2sqClWSqeKqCDqlAno6vqrSGnGZGAYhFpMoKI52g6Toum6HrTN6vrmP6QZMTyRkggmUZGRmllmd43hAA&config=PTAEFMGcBsEsDsAuBaAJrSBDARtcz5wAPFOQ0eAe2QCcpEbYBjRcVZWAWwAdKbFIAKC69%2BoAN6DQoVOABmCcAGFK8BQHMANFNDc6kcIgCCiBrGwBXRLDkBPbdL1RDASSarID3fsMBVKtoAvqByNJScoADkFlRMkJCRgoLEoogy8pgW0GmyCoQqarDqABSS0jRZUABcoADaOtK1kUwWkIjhtJWRmhKg7tB8NZF0qJGggQC6XlM6kAAWfIgtAjVlAAWgG1uR2OrI2JgGkUO7yLUAxHIADNfXEzKYNADWVacXAExXn%2B%2BYE91SW02m2aj3YByOJz2FzkMNh91Qjxeb3OAEYrmiUb9-kDAWtIqwSPtDuBjlECSgPl8vr8Hs8quSzpcbsy-l5Al4nAYVnUGt5nIh-JRigBKLyOHzGUyMSzWOwisV8rluDylXnSSBMTB4GoogB07wV0iYqHgQzmpm4kCqICgnF182A2Ok41FOhmgWFgiAA&css=PQKgBA6gTglgLgUzAYwK4Gc4HsC2YDCAyoWABYJQIA0YAhgHYAmYcUD6AZllDhWOqgAOg7nAB0YAGLcwCAB60cggDYIAXGBDAAUKDBi0mXGADe2sGC704AWgDuCGAHNScDQFYADJ4Dc5sAACtMLKAJ5gggCMLPK2ABR2pPBIcsoAlH4WAEa0yADWTlBYqEw2yFjK3Bpw5LxxAOTllVDoYpSMYgAs3vUZ2gC%2BmsBAA&options=N4XyA)\n<a name=\"gGQLG\"></a>\n### 总结\n上面的三个切换主题都是是基于CSS变量 + 类名切换\n<a name=\"i9SHj\"></a>\n### 拓展\n推荐文章：[前端主题切换方案 - 掘金](https://juejin.cn/post/7134594122391748615?searchId=2023111520263451784DE4336509D311D8)<br />讲解了6种方案：<br />\n![image.png](https://pic.code-nav.cn/post_picture/1619654407350222850/QHlHTvO9-image.png)\n<a name=\"GgHUr\"></a>\n## \n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 5,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1619654407350222850",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-16T04:30:51.000+00:00",
        "updateTime": "2023-11-17T05:09:49.000+00:00",
        "user": {
          "id": "1619654407350222850",
          "planetCode": "280",
          "userName": "阿皮",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/kddcgrkQHstt2FtBQn6AbdpteC0LFD5iadia7p7ea7SnicsbbrzPRC7GmyQtZ5psQtwtSzK5WysrpVj6zNF0RxFyA/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 100,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-01-30T22:53:54.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-29T11:11:17.000+00:00",
          "updateTime": "2023-11-16T04:12:23.000+00:00"
        },
        "tags": [
          "文章",
          "前端"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1724762962662649858",
        "title": "伙伴匹配项目求助",
        "description": null,
        "content": "伙伴匹配系统前端初始化时遇到这个问题,报错如下,找了很久的百度也无法解决,求大佬解决.是在 npm install 时报的错误\n![image.png](https://pic.code-nav.cn/post_picture/1684784251427360770/y1YFYXtD-image.png)\n\n![image.png](https://pic.code-nav.cn/post_picture/1684784251427360770/8mzFh3v7-image.png)\n\n![image.png](https://pic.code-nav.cn/post_picture/1684784251427360770/beGoHAFl-image.png)",
        "category": "问答",
        "cover": null,
        "language": null,
        "viewNum": 4,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1684784251427360770",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-15T12:15:09.000+00:00",
        "updateTime": "2023-11-16T11:19:47.000+00:00",
        "user": {
          "id": "1684784251427360770",
          "planetCode": "25231",
          "userName": "發財",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLAlnKIzN95Ycib1Yib5twEKPMIn2dnicz1Dx0t5UfaYiaH3EpjuOBJqctYcfA5d8egOsDmPqqsayUiatg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-07-28T04:36:56.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-07-28T04:34:01.000+00:00",
          "updateTime": "2023-07-31T15:10:55.000+00:00"
        },
        "tags": [
          "问答"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": [
          "1601072287388278786"
        ],
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "7117",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "712"
  },
  "message": "ok"
}